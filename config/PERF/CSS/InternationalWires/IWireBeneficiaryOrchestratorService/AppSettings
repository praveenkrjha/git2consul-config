{
	"AllowedHosts": "*",
	"ApplicationInsights": {
		"InstrumentationKey": "{{config:CSS.ApplicationInsights.InstrumentationKey}}"
	},
	"AuthorizationServiceBase": "{{config:CSS.AuthorizationServiceBase}}/api/v1/institutions/InstitutionId/products/ProductId/ApplicationId/role-service",
	"AuthorizationServiceUrl": "{{config:CSS.AuthorizationServiceBase}}/api/v1/institutions/InstitutionId/products/CSS/role-service/roles/CommaSeperatedRoleNames/permissions",
	"AuthorizationSetting": {
		"AssignedToMePermissionsUrl": "{{config:CSS.AuthorizationServiceBase}}/api/v1/institutions/InstitutionId/products/CSS/ApplicationId/role-service/permissions/assignedtome",
		"AuthorizationServiceUrl": "{{config:CSS.AuthorizationServiceBase}}/api/v1/institutions/InstitutionId/products/CSS/ApplicationId/role-service/permissions/assignedtome"
	},
	"AzureFileStorageURL": "{{config:CSS.AzureFileStorageURL}}",
	"CacheSettings": {
		"InMemoryCacheTimeout": "1000000",
		"InMemoryCacheTimeoutMinutes": "{{config:CSS.InMemoryCacheTimeoutMinutes}}"
	},
	"EncryptionSetting": {
		"AzureBlobName": "wdek.xml",
		"AzureBlobStorageAccountKey": "{{secret:CSS-EK-StorageAccountKey}}",
		"AzureBlobStorageAccountName": "{{config:CSS.EK.StorageAccountName}}",
		"AzureBlobStorageAppName": "wire-service",
		"AzureBlobStorageUri": "https://{{config:CSS.EK.StorageAccountName}}.blob.core.windows.net/d-wdek-1",
		"AzureVaultClientId": "{{secret:AzKvClientId}}",
		"AzureVaultClientSecret": "{{secret:AzKvClientSecret}}",
		"AzureVaultKeyIdentifier": "{{secret:AzKvHostName}}keys/WireDomainServiceDataProtection",
		"EncryptionKey": "my-very-long-key-of-no-exact-size"
	},
	"FileStorageSettings": {
		"ConnectionString": "{{config:CSS.FileStorageConnectionString}}"
	},
	"HttpHeaderSetting": {
		"HeaderExclusions": [
			{
				"HeaderName": "Content-Type",
				"HttpMethods": [
					"Get"
				]
			},
			{
				"HeaderName": "Content-Length",
				"HttpMethods": [
					"Get"
				]
			},
			{
				"HeaderName": "Transfer-Encoding",
				"HttpMethods": [
					"Get"
				]
			}
		],
		"HeaderValidationExcludedExtentionsPattern": "^.*\\.(html|js|ico|css|ico|json)$",
		"HeaderValidationExcludedURLs": [
			"/api/iwire-beneficiary-orchestrator-service/swagger",
			"/api/iwire-beneficiary-orchestrator-service/hc",
			"/swagger"
		]
	},
	"IdentityRequest": {
		"Acr_Values": "tenant:",
		"Client_Id": "jha-css-bg",
		"Client_Secret": "{{secret:Identity-JHA-CSS-BG-Client-Secret}}",
		"Grant_Type": "password",
		"Password": "{{secret:system1--jha-service-account-com-Password}}",
		"UserName": "system1@jha-service-account.com"
	},
	"IdentitySettings": {
		"IdentityUrl": "{{config:CSS.IdentityServiceUrl}}",
		"ValidAudiences": [
			"jha-ux",
			"ux-api",
			"bg-api",
			"bg-api-ex"
		]
	},
	"Kafka": {
		"AutoCommitIntervalMs": 5000,
		"BootstrapServers": "{{config:CSS.KafkaBootstrapServers.Servers}}",
		"Certificates": {
			"CaLocation": "{{config:CSS.KafkaBootstrapServers.Certificates.CaLocation}}",
			"ClientCertLocation": "{{config:CSS.KafkaBootstrapServers.Certificates.ClientCertLocation}}",
			"ClientKeyLocation": "{{config:CSS.KafkaBootstrapServers.Certificates.ClientKeyLocation}}"
		},
		"ClientId": "IWireBeneficiaryOrchestratorService.Api",
		"DbConnection": {
			"CollectionName": {
				"Metadata": "{{config:CSS.MongoForMessageBus.CollectionName.Metadata}}",
				"ProcessingFailed": "{{config:CSS.MongoForMessageBus.CollectionName.ProcessingFailed}}",
				"PublishFailed": "{{config:CSS.MongoForMessageBus.CollectionName.PublishFailed}}"
			},
			"ConnectionString": "{{config:CSS.MongoForMessageBus.ConnectionString}}",
			"DatabaseName": "{{config:CSS.MongoForMessageBus.DatabaseName}}"
		},
		"GroupId": "IWireBeneficiaryOrchestratorService.Api",
		"MaxPollIntervalMs": 300000,
		"RetrySettings": {
			"IsRequired": true
		}
	},
	"Logging": {
		"LogLevel": {
			"Default": "Information",
			"Microsoft": "Warning",
			"Microsoft.Hosting.Lifetime": "Information"
		}
	},
	"MongoDbSettings": {
		"ConnectionString": "{{config:CSS.Mongo.ConnectionPrefix}}://cssIWireBeneficiary_user:{{secret:cssIWireBeneficiary-Mongo-Password}}@{{config:CSS.Mongo.HostNames}}/{{config:CSS.Mongo.ConnectionSuffix}}",
		"DatabaseName": "cssIWireBeneficiary"
	},
	"PagingDefaultValue": {
		"PageNo": "1",
		"PageSize": "10"
	},
	"RedisConnectionString": "{{config:CSS.RedisConnectionString}}",
	"SettingServiceURLs": {
		"BaseUrl": "{{config:CSS.TenantConfigServiceUrl}}",
		"CurrencyURL": "/api/v1/institutions/{0}/products/{1}/{2}/setting-service/internationalsettings/common"
	},
	"TenantConfigURL": "{{config:CSS.TenantConfigServiceUrl}}",
	"Serilog": {
		"MinimumLevel": {
			"Default": "Debug",
			"Override": {
				"Microsoft": "Warning",
				"System": "Warning"
			}
		},
		"Properties": {
			"Application": "iwire-beneficiary-orchestrator-service",
			"Environment": "Development"
		}
	},
	"Swagger": {
		"Url": "api/iwire-beneficiary-orchestrator-service/swagger",
		"Title": "iWire Beneficiary Orchestrator Service",
		"Description": "IWireBeneficiary orchestrator application with Swagger, Swashbuckle, and API versioning.",
		"Headers": [
			{
				"Name": "Content-Type",
				"Required": true,
				"AllowEmptyValue": false,
				"Description": "Content Type. Example: application/json",
				"AllowedVerbs": [
					"Post",
					"Put"
				]
			},
			{
				"Name": "X-Request-Id",
				"Required": true,
				"AllowEmptyValue": false,
				"Description": "To support communications level correlation due to some responses only having header data, a round-trip identifier (GUID) will be sent on every call from the consumer and returned by the service provider (or intermediary) regardless of the final disposition of the request/message."
			},
			{
				"Name": "X-Correlation-Id",
				"Required": true,
				"AllowEmptyValue": false,
				"Description": "To support communications level tracking between the source and final destinations, a unique round-trip identifier (GUID) will be sent on every call from the caller and returned in the response by the service providers regardless of the final disposition of the request/message. The x-correlation-id can be re-used by intermediaries and/or service-providers to communicate beyond themselves indicating that the calls THEY are making are part of the same original message. (i.e. they are correlated)"
			},
			{
				"Name": "X-AuthenticationProductCredential",
				"Required": true,
				"AllowEmptyValue": false,
				"Description": "Authentication of the Consumer Product Credentials in the form of a JSON Web Token (JWT). Same as Authorization jwt unless the message is sent on-behalf-of this consumer product. Example: AuthenticationProductCredential: jwt:<GeneratedOidcJwt>"
			},
			{
				"Name": "x-css-correlation-id",
				"Required": false,
				"AllowEmptyValue": true,
				"Description": "CSS Correlation Id"
			}
		]
	},
	"HealthCheckUrl": "/api/iwire-beneficiary-orchestrator-service/hc",
	"HealthCheckLiveUrl": "/api/iwire-beneficiary-orchestrator-service/liveness",
	"CambridgeProxyServiceUrls": {
		"BaseUrl": "{{config:CSS.CambridgeProxyServiceBase}}",
		"GetCountriesUrl": "/api/v1/institutions/{0}/products/jha-css/InternationalWires/cambridgelink-proxy-service/beneficiary-helper/countries",
		"GetCitiesUrl": "/api/v1/institutions/{0}/products/jha-css/InternationalWires/cambridgelink-proxy-service/beneficiary-helper/cities?country=",
		"GetRegionsUrl": "/api/v1/institutions/{0}/products/jha-css/InternationalWires/cambridgelink-proxy-service/beneficiary-helper/regions?country=",
		"GetCurrenciesUrl": "/api/v1/institutions/{0}/products/jha-css/InternationalWires/cambridgelink-proxy-service/beneficiary-helper/currencies",
		"GetBeneficiaryTypeUrl": "/api/v1/institutions/{0}/products/jha-css/internationalwires/cambridgelink-proxy-service/beneficiary-helper/beneficiary-type",		
	},
	"CambridgeProxyServiceBackgroundJobUrls": {
		"BaseUrl": "{{config:CSS.CambridgeProxyServiceBase}}",
		"GetCountriesUrl": "/api/v1/products/jha-css/InternationalWires/cambridgelink-proxy-service/beneficiary-helper/countries",
		"GetRegionsUrl": "/api/v1/products/jha-css/InternationalWires/cambridgelink-proxy-service/beneficiary-helper/regions?country=",
		"GetCurrenciesUrl": "/api/v1/products/jha-css/InternationalWires/cambridgelink-proxy-service/beneficiary-helper/currencies",
		"GetPaymentPurposeUrl": "/api/v1/products/jha-css/internationalwires/cambridgelink-proxy-service/wire-transfer-helper/payment-purpose",
		"GetBeneficiaryTypeUrl": "/api/v1/products/jha-css/internationalwires/cambridgelink-proxy-service/beneficiary-helper/beneficiary-type"
	},
	"MasterDataServiceUrls": {
		"BaseUrl": "{{config:CSS.MasterDataServiceBase}}",
		"UpdateOptionTypeUrl": "/api/v1/products/CSS/InternationalWires/master-data-service/option-type",
		"GetOptionTypeUrl": "/api/v1/products/CSS/InternationalWires/master-data-service/option-type/{0}",
		"OptionTypeUrl": "/api/v1/institutions/{InstitutionId}/products/{ProductId}/{ApplicationId}/master-data-service/option/{OptionTypeKey}/{OptionDepth}"
	},
	"NoteServiceUrls": {
		"BaseUrl": "{{config:CSS.NoteDomainBase}}",
		"GetNotesByParentIdUrl": "/api/v1/institutions/{0}/products/{1}/{2}/note-service/{3}/notes",
		"GetNoteByIdUrl": "/api/v1/institutions/{0}/products/{1}/{2}/note-service/notes/{3}",
		"AddNoteUrl": "/api/v1/institutions/{0}/products/{1}/{2}/note-service/notes",
		"UpdateNoteUrl": "/api/v1/institutions/{0}/products/{1}/{2}/note-service/notes/{3}",
		"DeleteNoteUrl": "/api/v1/institutions/{0}/products/{1}/{2}/note-service/notes/delete"
	},
	"BeneficiaryServiceUrls": {
		"BaseUrl": "{{config:CSS.BeneficiaryServiceBase}}",
		"GetBeneficiaryById": "/api/v1/institutions/{0}/products/{1}/{2}/iwire-beneficiary-service/beneficiary/{3}"
	}
}